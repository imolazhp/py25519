{
  "name": "Py25519",
  "tagline": "Python wrappers around  Ed25519: high-speed high-security signatures by Daniel J. Bernstein",
  "body": "\r\n# py25519\r\nPython wrapper around curve25519 by mehdi sotoodeh.  The files under py25519/c  are from mehdi sotoodeh and are copied unchanged from https://github.com/msotoodeh/curve25519.\r\n\r\n# LICENSE\r\nThe files under py25519/c are licensed under the MIT LICENSE (see license.txt file under py25519/c).\r\n\r\nAll remaining files in this package are licensed under the GNU General Public License version 3 or (at your option) any later version.\r\n\r\nSee the file LICENSE-GPLv3.txt for details of the GNU General Public License version 3.\r\n\r\n\r\n# Class Documentation\r\n~~~~ {.sourceCode .python}\r\n\tclass Key25519(__builtin__.object)\r\n\t    __init__(self, secretkey=None, verifyingkey=None, pubkey=None)\r\n\t\t    '''\r\n\t        secretkey-->bytes[32]\r\n \t        verifyingkey-->bytes[32]\r\n\t        pubkey-->bytes[32]\r\n\r\n\t        A PublicKey version of the object will have ONLY verifyingkey\r\n\t        and pubkey and signingkey will be None\r\n\t        A PrivateKey version of the object will have secretkey set\r\n\t        and verifyingkey and pubkey are ignored and derived from secretkey\r\n\t       \r\n\t        Storing and reusing the secretkey is a way to recreate your key pair\r\n\t\t    '''\r\n\t   \r\n\t    get_ecdh_key(self, other)\r\n\t\t    '''\r\n\t        other-->Key25519 instance\r\n\t\t    '''\r\n\t   \r\n\t    public_key(self)\r\n\t\t    '''\r\n\t        Returns a PublicKey version of this object\r\n\t\t    '''\r\n\t   \r\n\t    selftest(self)\r\n\t\t    '''\r\n\t        Returns-->boolean\r\n\t\t    '''\r\n\t   \r\n\t    serialize(self)\r\n\t   \r\n\t    sign = wrapped(*args, **kwargs)\r\n\t   \r\n\t    verify = wrapped(*args, **kwargs)\r\n\t   \r\n\t    # ---------------------------------------------------------------------\r\n\t    # Properties (data descriptors)\r\n\t    # ---------------------------------------------------------------------\r\n\t   \r\n\t    pubkey\r\n\t   \r\n\t    secretkey\r\n\t   \r\n\t    signingkey\r\n\t   \r\n\t    verifyingkey\r\n~~~~\r\n\r\n\r\n# Simple test\r\nsee py25519.test.py\r\n\r\n~~~~ {.sourceCode .python}\r\n    from py25519 import Key25519\r\n\r\n    c = Key25519()\r\n    print('secretkey: ', c.secretkey)\r\n    print('signingkey: ', c.signingkey)\r\n    print('verifyingkey: ', c.verifyingkey)\r\n\r\n    msg = 'Hello world'\r\n    badmsg = msg + '1'\r\n    sig = c.sign(msg)\r\n    badsig = c.sign(badmsg)\r\n    print('good verify: ', c.verify(sig, msg))\r\n    print('badmsg verify: ', c.verify(sig, badmsg))\r\n    print('badsig verify: ', c.verify(badsig, msg))\r\n\r\n    d = Key25519(secretkey=c.secretkey)\r\n    print('----- d is a copy of c -----')\r\n    print('d.verify: ', d.verify(sig, msg))\r\n    print('c == d:', c == d)\r\n    print('public(c) == public(d):', c.public_key() == d.public_key())\r\n    print('c == public(d):', c == d.public_key())\r\n\r\n    print('----- e is a new different key -----')\r\n    e = Key25519()\r\n    print('e.verify: ', e.verify(sig, msg))\r\n    print('c == e:', c == e)\r\n    print('public(c) == public(e):', c.public_key() == e.public_key())\r\n\r\n    print('----- Test ECDH shared key -----')\r\n    ecdh1 = c.get_ecdh_key(e.public_key())\r\n    ecdh2 = e.get_ecdh_key(c.public_key())\r\n    print('ecdh equal: ', ecdh1 == ecdh2)\r\n    ecdh3 = e.get_ecdh_key(c.public_key())\r\n    print('ecdh equal again: ', ecdh1 == ecdh3)\r\n~~~~\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}